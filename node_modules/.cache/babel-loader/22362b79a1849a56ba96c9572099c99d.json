{"ast":null,"code":"import axios from\"axios\";const dotenv=require(\"dotenv\");dotenv.config();const instance=axios.create({baseURL:process.env.SERVER_URL,withCredentials:true,timeout:10000,delayed:true,headers:{'Access-Control-Allow-Origin':'*'}});instance.interceptors.request.use(config=>{if(config.delayed){return new Promise(resolve=>setTimeout(()=>resolve(config),1000));}return config;},error=>{return Promise.reject(error);});export default instance;","map":{"version":3,"names":["axios","dotenv","require","config","instance","create","baseURL","process","env","SERVER_URL","withCredentials","timeout","delayed","headers","interceptors","request","use","Promise","resolve","setTimeout","error","reject"],"sources":["/home/devuser/SACHIN/client/src/utils/axios.js"],"sourcesContent":["import axios from \"axios\";\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n\n\nconst instance = axios.create({\n  baseURL: process.env.SERVER_URL,\n  withCredentials: true,\n  timeout: 10000,\n  delayed: true,\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n  \n  \n});\n\ninstance.interceptors.request.use(\n  (config) => {\n    if (config.delayed) {\n      return new Promise((resolve) => setTimeout(() => resolve(config), 1000));\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default instance;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,KAAM,CAAAC,MAAM,CAAGC,OAAO,CAAC,QAAQ,CAAC,CAChCD,MAAM,CAACE,MAAM,CAAC,CAAC,CAGf,KAAM,CAAAC,QAAQ,CAAGJ,KAAK,CAACK,MAAM,CAAC,CAC5BC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,CAC/BC,eAAe,CAAE,IAAI,CACrBC,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,IAAI,CACbC,OAAO,CAAE,CACP,6BAA6B,CAAE,GACjC,CAGF,CAAC,CAAC,CAEFT,QAAQ,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9Bb,MAAM,EAAK,CACV,GAAIA,MAAM,CAACS,OAAO,CAAE,CAClB,MAAO,IAAI,CAAAK,OAAO,CAAEC,OAAO,EAAKC,UAAU,CAAC,IAAMD,OAAO,CAACf,MAAM,CAAC,CAAE,IAAI,CAAC,CAAC,CAC1E,CACA,MAAO,CAAAA,MAAM,CACf,CAAC,CACAiB,KAAK,EAAK,CACT,MAAO,CAAAH,OAAO,CAACI,MAAM,CAACD,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAhB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}