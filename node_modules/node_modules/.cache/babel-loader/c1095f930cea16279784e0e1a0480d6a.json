{"ast":null,"code":"import axios from \"axios\";\nconst dotenv = require(\"dotenv\");\ndotenv.config();\nconst instance = axios.create({\n  baseURL: process.env.SERVER_URL,\n  withCredentials: true,\n  timeout: 10000,\n  delayed: true,\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n});\ninstance.interceptors.request.use(config => {\n  if (config.delayed) {\n    return new Promise(resolve => setTimeout(() => resolve(config), 1000));\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","dotenv","require","config","instance","create","baseURL","process","env","SERVER_URL","withCredentials","timeout","delayed","headers","interceptors","request","use","Promise","resolve","setTimeout","error","reject"],"sources":["/home/devuser/SACHIN/client/src/utils/axios.js"],"sourcesContent":["import axios from \"axios\";\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n\n\nconst instance = axios.create({\n  baseURL: process.env.SERVER_URL,\n  withCredentials: true,\n  timeout: 10000,\n  delayed: true,\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n  \n  \n});\n\ninstance.interceptors.request.use(\n  (config) => {\n    if (config.delayed) {\n      return new Promise((resolve) => setTimeout(() => resolve(config), 1000));\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default instance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChCD,MAAM,CAACE,MAAM,CAAC,CAAC;AAGf,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC5BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU;EAC/BC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACP,6BAA6B,EAAE;EACjC;AAGF,CAAC,CAAC;AAEFT,QAAQ,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9Bb,MAAM,IAAK;EACV,IAAIA,MAAM,CAACS,OAAO,EAAE;IAClB,OAAO,IAAIK,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,CAACf,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;EAC1E;EACA,OAAOA,MAAM;AACf,CAAC,EACAiB,KAAK,IAAK;EACT,OAAOH,OAAO,CAACI,MAAM,CAACD,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAehB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}