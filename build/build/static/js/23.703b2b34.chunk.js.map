{"version":3,"sources":["components/Skeletons/SkeletonUserAddresses.js","components/Profile/UserAddresses.js"],"names":["SkeletonUserAddresses","React","createElement","Fragment","Skeleton","height","width","Grid","py","Col","xs","Card","p","shadow","radius","sx","theme","backgroundColor","colorScheme","colors","dark","borderWidth","borderStyle","borderColor","Group","mb","position","UserAddresses","dispatch","useDispatch","user","useOutletContext","userAddresses","getUserAddresses","getUserAddressesState","useSelector","state","auth","useEffect","_id","clearUserAddresses","Paper","fn","smallerThan","marginTop","my","withBorder","loading","length","Title","order","fontFamily","map","address","key","firstName","lastName","isPrimary","Badge","color","Text","streetAddress","city","country","zipCode"],"mappings":"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","file":"static/js/23.703b2b34.chunk.js","sourcesContent":["import { Grid, Group, Card, Skeleton } from \"@mantine/core\";\nimport React from \"react\";\n\nconst SkeletonUserAddresses = () => {\n  return (\n    <>\n      <Skeleton height={30} width={200} />\n      <Grid py=\"lg\">\n        <Grid.Col xs={4}>\n          <Card\n            p=\"lg\"\n            shadow=\"lg\"\n            radius=\"md\"\n            sx={(theme) => ({\n              backgroundColor:\n                theme.colorScheme === \"dark\" ? theme.colors.dark[7] : \"#f8f9fa\",\n              borderWidth: 2,\n              borderStyle: \"solid\",\n              borderColor:\n                theme.colorScheme === \"dark\" ? \"transparent\" : \"#f1f5f8\",\n            })}\n          >\n            <Group mb=\"lg\" position=\"apart\">\n              <Skeleton height={20} width=\"45%\" />\n              <Skeleton height={12} width=\"30%\" />\n            </Group>\n            <Skeleton mb=\"md\" height={10} />\n            <Skeleton mb=\"md\" height={10} />\n            <Skeleton mb=\"md\" height={10} width=\"40%\" />\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={4}>\n          <Card\n            p=\"lg\"\n            shadow=\"lg\"\n            radius=\"md\"\n            sx={(theme) => ({\n              backgroundColor:\n                theme.colorScheme === \"dark\" ? theme.colors.dark[7] : \"#f8f9fa\",\n              borderWidth: 2,\n              borderStyle: \"solid\",\n              borderColor:\n                theme.colorScheme === \"dark\" ? \"transparent\" : \"#f1f5f8\",\n            })}\n          >\n            <Group mb=\"lg\" position=\"apart\">\n              <Skeleton height={20} width=\"45%\" />\n              <Skeleton height={12} width=\"30%\" />\n            </Group>\n            <Skeleton mb=\"md\" height={10} />\n            <Skeleton mb=\"md\" height={10} />\n            <Skeleton mb=\"md\" height={10} width=\"40%\" />\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={4}>\n          <Card\n            p=\"lg\"\n            shadow=\"lg\"\n            radius=\"md\"\n            sx={(theme) => ({\n              backgroundColor:\n                theme.colorScheme === \"dark\" ? theme.colors.dark[7] : \"#f8f9fa\",\n              borderWidth: 2,\n              borderStyle: \"solid\",\n              borderColor:\n                theme.colorScheme === \"dark\" ? \"transparent\" : \"#f1f5f8\",\n            })}\n          >\n            <Group mb=\"lg\" position=\"apart\">\n              <Skeleton height={20} width=\"45%\" />\n              <Skeleton height={12} width=\"30%\" />\n            </Group>\n            <Skeleton mb=\"md\" height={10} />\n            <Skeleton mb=\"md\" height={10} />\n            <Skeleton mb=\"md\" height={10} width=\"40%\" />\n          </Card>\n        </Grid.Col>\n      </Grid>\n    </>\n  );\n};\n\nexport default SkeletonUserAddresses;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useOutletContext } from \"react-router-dom\";\nimport { Grid, Paper, Title, Card, Text, Group, Badge } from \"@mantine/core\";\nimport {\n  getUserAddresses,\n  clearUserAddresses,\n} from \"../../redux/slices/authSlice\";\nimport SkeletonUserAddresses from \"../Skeletons/SkeletonUserAddresses\";\nimport React from \"react\";\n\nconst UserAddresses = () => {\n  const dispatch = useDispatch();\n  const user = useOutletContext();\n  const { userAddresses, getUserAddresses: getUserAddressesState } =\n    useSelector((state) => state.auth);\n\n  useEffect(() => {\n    dispatch(getUserAddresses(user?._id));\n    return () => {\n      dispatch(clearUserAddresses());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  return (\n    <Paper\n      sx={(theme) => ({\n        [theme.fn.smallerThan(\"md\")]: {\n          marginTop: 60,\n        },\n        backgroundColor:\n          theme.colorScheme === \"dark\" ? theme.colors.dark[6] : \"#fff\",\n      })}\n      my=\"md\"\n      shadow=\"xs\"\n      radius=\"md\"\n      p=\"lg\"\n      withBorder\n    >\n      {getUserAddressesState?.loading && <SkeletonUserAddresses />}\n      {!getUserAddressesState.loading && userAddresses?.length === 0 && (\n        <Title\n          order={3}\n          sx={(theme) => ({\n            fontFamily: theme.fontFamily,\n          })}\n        >\n          You have no shipping addresses yet.\n        </Title>\n      )}\n      {!getUserAddressesState?.loading && userAddresses?.length > 0 && (\n        <>\n          <Title\n            order={3}\n            sx={(theme) => ({\n              fontFamily: theme.fontFamily,\n            })}\n          >\n            Your Addresses\n          </Title>\n          <Grid py=\"lg\">\n            {userAddresses.map((address) => {\n              return (\n                <Grid.Col key={address?._id} xs={4}>\n                  <Card\n                    p=\"lg\"\n                    shadow=\"lg\"\n                    radius=\"md\"\n                    sx={(theme) => ({\n                      backgroundColor:\n                        theme.colorScheme === \"dark\"\n                          ? theme.colors.dark[7]\n                          : \"#f8f9fa\",\n                      borderWidth: 2,\n                      borderStyle: \"solid\",\n                      borderColor:\n                        theme.colorScheme === \"dark\"\n                          ? \"transparent\"\n                          : \"#f1f5f8\",\n                    })}\n                  >\n                    <Group mb=\"md\" position=\"apart\">\n                      <Title\n                        order={4}\n                        sx={(theme) => ({\n                          fontFamily: theme.fontFamily,\n                        })}\n                      >\n                        {address?.firstName} {address?.lastName}\n                      </Title>\n                      {address?.isPrimary && (\n                        <Badge\n                          sx={(theme) => ({\n                            color:\n                              theme.colorScheme === \"dark\" ? \"#fff\" : \"#000\",\n                          })}\n                        >\n                          Default\n                        </Badge>\n                      )}\n                    </Group>\n                    <Text>\n                      {address?.streetAddress}, {address?.city},{address?.state}\n                      , {address?.country}, {address?.zipCode}\n                    </Text>\n                  </Card>\n                </Grid.Col>\n              );\n            })}\n          </Grid>\n        </>\n      )}\n    </Paper>\n  );\n};\n\nexport default UserAddresses;\n"],"sourceRoot":""}